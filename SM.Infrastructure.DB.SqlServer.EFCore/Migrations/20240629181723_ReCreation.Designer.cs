// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SM.Infrastructure.DB.SqlServer.EFCore.Contexts;

#nullable disable

namespace SM.Infrastructure.DB.SqlServer.EFCore.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20240629181723_ReCreation")]
    partial class ReCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SM.Domain.Core.OrderAgg.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("float");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("IssueTrackingNo")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<double>("PayAmount")
                        .HasColumnType("float");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<long>("RefId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SM.Domain.Core.ProductAgg.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Inventory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryId = 3L,
                            Code = "1",
                            CreationDate = new DateTime(2024, 6, 29, 11, 17, 13, 363, DateTimeKind.Local).AddTicks(5178),
                            Description = "گلدان بلند سفید سرامیکی مخصوص گل های آپارتمانی",
                            Inventory = true,
                            IsRemoved = false,
                            Keywords = "گلدان سرامیکی سفید",
                            MetaDescription = "گلدان بلند سفید سرامیکی مخصوص گل های آپارتمانی",
                            Name = "گلدان سرامیکی سفید",
                            ShortDescription = "گلدان بلند سفید سرامیکی مخصوص گل های آپارتمانی",
                            Slug = "گلدان-سرامیکی-سفید"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryId = 2L,
                            Code = "2",
                            CreationDate = new DateTime(2024, 6, 29, 11, 17, 13, 363, DateTimeKind.Local).AddTicks(5236),
                            Description = "صندلی راحتی پایه کوتاه از جنس لنین",
                            Inventory = true,
                            IsRemoved = false,
                            Keywords = "صندلی راحتی پایه کوتاه",
                            MetaDescription = "صندلی راحتی پایه کوتاه از جنس لنین",
                            Name = "صندلی راحتی",
                            ShortDescription = "صندلی راحتی پایه کوتاه از جنس لنین",
                            Slug = "صندلی-راحتی"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryId = 2L,
                            Code = "3",
                            CreationDate = new DateTime(2024, 6, 29, 11, 17, 13, 363, DateTimeKind.Local).AddTicks(5255),
                            Description = "صندلی پاف بدون پایه استوانه ای طرح سنتی، داخل پشم شیشه.",
                            Inventory = true,
                            IsRemoved = false,
                            Keywords = "صندلی پاف بدون پایه",
                            MetaDescription = "صندلی پاف بدون پایه استوانه ای طرح سنتی ",
                            Name = "صندلی پاف بدون پایه",
                            ShortDescription = "صندلی پاف بدون پایه استوانه ای طرح سنتی ",
                            Slug = "صندلی-پاف-بدون-پایه"
                        },
                        new
                        {
                            Id = 4L,
                            CategoryId = 1L,
                            Code = "4",
                            CreationDate = new DateTime(2024, 6, 29, 11, 17, 13, 363, DateTimeKind.Local).AddTicks(5273),
                            Description = "چراغ پایه بلند با قابلیت کوتاه بلند کردن تا سقف 200 سانتی متر",
                            Inventory = true,
                            IsRemoved = false,
                            Keywords = "چراغ پایه بلند",
                            MetaDescription = "چراغ پایه بلند با قابلیت کوتاه بلند کردن تا سقف 200 سانتی متر ",
                            Name = "چراغ پایه بلند",
                            ShortDescription = "چراغ پایه بلند با قابلیت کوتاه بلند کردن تا سقف 200 سانتی متر ",
                            Slug = "چراغ-پایه-بلند"
                        },
                        new
                        {
                            Id = 5L,
                            CategoryId = 2L,
                            Code = "5",
                            CreationDate = new DateTime(2024, 6, 29, 11, 17, 13, 363, DateTimeKind.Local).AddTicks(5290),
                            Description = "اوراگانایزر استوانه ای پارچه ای مخصوص لباس مدل HiMode\r\nمشخصات فنی : 27x27x27  سانتی متر\r\nجنس : نمد",
                            Inventory = true,
                            IsRemoved = false,
                            Keywords = "اورگانایزر پارچه ای",
                            MetaDescription = "اوراگانایزر استوانه ای پارچه ای مخصوص لباس ",
                            Name = "اورگانایزر پارچه ای",
                            ShortDescription = "اوراگانایزر استوانه ای پارچه ای مخصوص لباس",
                            Slug = "اورگانایزر-پارچه-ای"
                        },
                        new
                        {
                            Id = 6L,
                            CategoryId = 1L,
                            Code = "6",
                            CreationDate = new DateTime(2024, 6, 29, 11, 17, 13, 363, DateTimeKind.Local).AddTicks(5426),
                            Description = "چراغ سطلی پایه کوتاه با ارتفاع 50 سانتی متر و لایتینک زرد، سفید و بنفشجنس : نمد",
                            Inventory = true,
                            IsRemoved = false,
                            Keywords = "چراغ سطلی",
                            MetaDescription = "چراغ سطلی پایه کوتاه ",
                            Name = "چراغ سطلی",
                            ShortDescription = "چراغ سطلی",
                            Slug = "چراغ-سطلی"
                        },
                        new
                        {
                            Id = 7L,
                            CategoryId = 3L,
                            Code = "7",
                            CreationDate = new DateTime(2024, 6, 29, 11, 17, 13, 363, DateTimeKind.Local).AddTicks(5444),
                            Description = "گلدان پایه دار با پایه برنجی و جنس سرامیکی با ارتفاع 200 سانتی متر",
                            Inventory = true,
                            IsRemoved = false,
                            Keywords = "گلدان پایه دار",
                            MetaDescription = "گلدان پایه دار با پایه برنجی و جنس سرامیکی ",
                            Name = "گلدان پایه دار",
                            ShortDescription = "گلدان پایه دار با پایه برنجی و جنس سرامیکی",
                            Slug = "گلدان-پایه-دار"
                        },
                        new
                        {
                            Id = 8L,
                            CategoryId = 3L,
                            Code = "8",
                            CreationDate = new DateTime(2024, 6, 29, 11, 17, 13, 363, DateTimeKind.Local).AddTicks(5462),
                            Description = "استند گل چوبی با ارتفاع متغیر تا سقف 400 سانتی متر",
                            Inventory = true,
                            IsRemoved = false,
                            Keywords = "استند گل چوبی",
                            MetaDescription = "استند گل چوبی",
                            Name = "استند گل",
                            ShortDescription = "استند گل چوبی ",
                            Slug = "استند-گل"
                        });
                });

            modelBuilder.Entity("SM.Domain.Core.ProductAgg.Entities.ProductPicture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureAlt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PictureTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPictures");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRemoved = false,
                            Picture = "4dcea8c370e84a4583dd11c36918db46.jpg",
                            PictureAlt = "گلدان سرامیکی سفید",
                            PictureTitle = "گلدان سرامیکی سفید",
                            ProductId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRemoved = false,
                            Picture = "9409d0dde40c464eb10e81cdb7e819d9.jpg",
                            PictureAlt = "گلدان سرامیکی سفید",
                            PictureTitle = "گلدان سرامیکی سفید",
                            ProductId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRemoved = false,
                            Picture = "47157c1ce82f4a9f9f325139056044bf.jpg",
                            PictureAlt = "صندلی  راحتی",
                            PictureTitle = "صندلی راحتی",
                            ProductId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRemoved = false,
                            Picture = "8637033e7a324e4ea1f6aaf0a6809b83.jpg",
                            PictureAlt = "صندلی  راحتی",
                            PictureTitle = "صندلی راحتی",
                            ProductId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRemoved = false,
                            Picture = "667bd11e85894f72ba29c3c1cdf6fb45.jpg",
                            PictureAlt = "صندلی پاف بدون پایه",
                            PictureTitle = "صندلی پاف بدون پایه",
                            ProductId = 3L
                        },
                        new
                        {
                            Id = 6L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRemoved = false,
                            Picture = "d7bce363d9cf413ca85582dab5019577.jpg",
                            PictureAlt = "چراغ پایه بلند",
                            PictureTitle = "چراغ پایه بلند",
                            ProductId = 4L
                        },
                        new
                        {
                            Id = 7L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRemoved = false,
                            Picture = "a1f312cb804247aa83042f508efd9b2e.jpg",
                            PictureAlt = "اورگانایزر پارچه ای",
                            PictureTitle = "اورگانایزر پارچه ای",
                            ProductId = 5L
                        },
                        new
                        {
                            Id = 8L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRemoved = false,
                            Picture = "1611d83ade5946bdb99dc033d8cd5940.jpg",
                            PictureAlt = "چراغ سطلی",
                            PictureTitle = "چراغ سطلی",
                            ProductId = 6L
                        },
                        new
                        {
                            Id = 9L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRemoved = false,
                            Picture = "e7e81158e93d4ffaa146e5f9bc6cbdce.jpg",
                            PictureAlt = "چراغ سطلی",
                            PictureTitle = "چراغ سطلی",
                            ProductId = 6L
                        },
                        new
                        {
                            Id = 10L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRemoved = false,
                            Picture = "5ad0368c3d1a4684abd4bd8bb72e3700.jpg",
                            PictureAlt = "گلدان پایه دار",
                            PictureTitle = "گلدان پایه دار",
                            ProductId = 7L
                        },
                        new
                        {
                            Id = 11L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRemoved = false,
                            Picture = "af08b9d21c2f4d2bb582a8d67865129e.jpg",
                            PictureAlt = "گلدان پایه دار",
                            PictureTitle = "گلدان پایه دار",
                            ProductId = 7L
                        },
                        new
                        {
                            Id = 12L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRemoved = false,
                            Picture = "7408008595fc46879ab174b54e5f5141.jpg",
                            PictureAlt = "استند گل",
                            PictureTitle = "استند گل",
                            ProductId = 8L
                        },
                        new
                        {
                            Id = 13L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRemoved = false,
                            Picture = "42f851066cbc457f964c3ef01545ce1d.jpg",
                            PictureAlt = "استند گل",
                            PictureTitle = "استند گل",
                            ProductId = 8L
                        },
                        new
                        {
                            Id = 14L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRemoved = false,
                            Picture = "d73fe5a82d26447f8022d0cfd6448e95.jpg",
                            PictureAlt = "صندلی پاف بدون پایه",
                            PictureTitle = "صندلی پاف بدون پایه",
                            ProductId = 3L
                        });
                });

            modelBuilder.Entity("SM.Domain.Core.ProductCategoryAgg.Entities.Picture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Pictures");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Alt = "دکوری",
                            CreationDate = new DateTime(2024, 6, 29, 11, 17, 13, 365, DateTimeKind.Local).AddTicks(235),
                            IsRemoved = false,
                            Name = "cf827bdd90884e36aee3fecd26617036.jpg",
                            Title = "دکوری"
                        },
                        new
                        {
                            Id = 2L,
                            Alt = "راحتی",
                            CreationDate = new DateTime(2024, 6, 29, 11, 17, 13, 365, DateTimeKind.Local).AddTicks(366),
                            IsRemoved = false,
                            Name = "6ca4f38a6635446db326f54283659b2e.jpg",
                            Title = "راحتی"
                        },
                        new
                        {
                            Id = 3L,
                            Alt = "گلدان",
                            CreationDate = new DateTime(2024, 6, 29, 11, 17, 13, 365, DateTimeKind.Local).AddTicks(432),
                            IsRemoved = false,
                            Name = "e6f462ad8ec14614accc243ebf42558e.jpg",
                            Title = "گلدان"
                        });
                });

            modelBuilder.Entity("SM.Domain.Core.ProductCategoryAgg.Entities.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("KeyWords")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("PictureId")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("PictureId")
                        .IsUnique();

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationDate = new DateTime(2024, 6, 29, 11, 17, 13, 366, DateTimeKind.Local).AddTicks(3426),
                            Description = "انواع لوازم دکوری خانه",
                            IsRemoved = false,
                            KeyWords = "لوازم دکوری",
                            MetaDescription = "انواع لوازم دکوری خانه",
                            Name = "دکوری",
                            PictureId = 1L,
                            Slug = "دکوری"
                        },
                        new
                        {
                            Id = 2L,
                            CreationDate = new DateTime(2024, 6, 29, 11, 17, 13, 366, DateTimeKind.Local).AddTicks(3477),
                            Description = "انواع لوازم راحتی خانه",
                            IsRemoved = false,
                            KeyWords = "لوازم راحتی",
                            MetaDescription = "انواع لوازم راحتی خانه",
                            Name = "راحتی",
                            PictureId = 2L,
                            Slug = "راحتی"
                        },
                        new
                        {
                            Id = 3L,
                            CreationDate = new DateTime(2024, 6, 29, 11, 17, 13, 366, DateTimeKind.Local).AddTicks(3489),
                            Description = "انواع گلدان های سرامیکی و سفالی",
                            IsRemoved = false,
                            KeyWords = "گلدان",
                            MetaDescription = "انواع گلدان های سرامیکی و سفالی",
                            Name = "گلدان",
                            PictureId = 3L,
                            Slug = "گلدان"
                        });
                });

            modelBuilder.Entity("SM.Domain.Core.SliderAgg.Entities.Slide", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BtnText")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PictureId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PictureId")
                        .IsUnique();

                    b.ToTable("Slides");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BtnText = "#Products",
                            CreationDate = new DateTime(2024, 6, 29, 11, 17, 13, 367, DateTimeKind.Local).AddTicks(3514),
                            Heading = "دنبال قشنگ کردن خونتی؟",
                            IsRemoved = false,
                            Link = "اینجا کلیک کن",
                            PictureId = 1L,
                            Text = "تا جمعه وقت داری با 40 درصد تخفیف خونتو قشنگ تر کنی",
                            Title = "ما با 40 درصد تخفیف کمکت میکنیم"
                        },
                        new
                        {
                            Id = 2L,
                            BtnText = "#Products",
                            CreationDate = new DateTime(2024, 6, 29, 11, 17, 13, 367, DateTimeKind.Local).AddTicks(3645),
                            Heading = "میخوای کادو بخری؟",
                            IsRemoved = false,
                            Link = "کلیک کن",
                            PictureId = 2L,
                            Text = "ما واسه یه سری لوازم دکوری تخفیف 30 درصد زدیم. از دستش نده",
                            Title = "با 30 درصد تخفیف کادو بخر"
                        });
                });

            modelBuilder.Entity("SM.Domain.Core.SliderAgg.Entities.SlidePicture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("SlidePictures");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Alt = "مبل",
                            CreationDate = new DateTime(2024, 6, 29, 11, 17, 13, 368, DateTimeKind.Local).AddTicks(512),
                            IsRemoved = false,
                            Name = "5099b0fa6ac04deca0452dd70bedb89a.jpg",
                            Title = "مبل"
                        },
                        new
                        {
                            Id = 2L,
                            Alt = "ساعت",
                            CreationDate = new DateTime(2024, 6, 29, 11, 17, 13, 368, DateTimeKind.Local).AddTicks(647),
                            IsRemoved = false,
                            Name = "6aef82656ec6439388b7d50739a65f87.jpg",
                            Title = "ساعت"
                        });
                });

            modelBuilder.Entity("SM.Domain.Core.OrderAgg.Entities.Order", b =>
                {
                    b.OwnsMany("SM.Domain.Core.OrderAgg.Entities.OrderItem", "Items", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<long>("Id"));

                            b1.Property<int>("Count")
                                .HasColumnType("int");

                            b1.Property<DateTime>("CreationDate")
                                .HasColumnType("datetime2");

                            b1.Property<int>("DiscountRate")
                                .HasColumnType("int");

                            b1.Property<bool>("IsRemoved")
                                .HasColumnType("bit");

                            b1.Property<long>("OrderId")
                                .HasColumnType("bigint");

                            b1.Property<long>("ProductId")
                                .HasColumnType("bigint");

                            b1.Property<double>("UnitPrice")
                                .HasColumnType("float");

                            b1.HasKey("Id");

                            b1.HasIndex("OrderId");

                            b1.ToTable("OrderItems", (string)null);

                            b1.WithOwner("Order")
                                .HasForeignKey("OrderId");

                            b1.Navigation("Order");
                        });

                    b.Navigation("Items");
                });

            modelBuilder.Entity("SM.Domain.Core.ProductAgg.Entities.Product", b =>
                {
                    b.HasOne("SM.Domain.Core.ProductCategoryAgg.Entities.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SM.Domain.Core.ProductAgg.Entities.ProductPicture", b =>
                {
                    b.HasOne("SM.Domain.Core.ProductAgg.Entities.Product", "Product")
                        .WithMany("Pictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SM.Domain.Core.ProductCategoryAgg.Entities.ProductCategory", b =>
                {
                    b.HasOne("SM.Domain.Core.ProductCategoryAgg.Entities.Picture", "Picture")
                        .WithOne("ProductCategory")
                        .HasForeignKey("SM.Domain.Core.ProductCategoryAgg.Entities.ProductCategory", "PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("SM.Domain.Core.SliderAgg.Entities.Slide", b =>
                {
                    b.HasOne("SM.Domain.Core.SliderAgg.Entities.SlidePicture", "Picture")
                        .WithOne("Slide")
                        .HasForeignKey("SM.Domain.Core.SliderAgg.Entities.Slide", "PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("SM.Domain.Core.ProductAgg.Entities.Product", b =>
                {
                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("SM.Domain.Core.ProductCategoryAgg.Entities.Picture", b =>
                {
                    b.Navigation("ProductCategory")
                        .IsRequired();
                });

            modelBuilder.Entity("SM.Domain.Core.ProductCategoryAgg.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SM.Domain.Core.SliderAgg.Entities.SlidePicture", b =>
                {
                    b.Navigation("Slide")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
